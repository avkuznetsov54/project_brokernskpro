# Generated by Django 3.0.6 on 2020-05-24 08:56

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email address')),
                ('password', models.CharField(max_length=128, verbose_name='Пароль')),
                ('full_name', models.CharField(blank=True, max_length=255, verbose_name='ФИО')),
                ('gender', models.CharField(blank=True, choices=[('female', 'Женский'), ('male', 'Мужской')], max_length=25, verbose_name='Пол')),
                ('birth_date', models.DateField(blank=True, help_text='Формат: YYYY-MM-DD', null=True, verbose_name='День рождения')),
                ('bio', models.TextField(blank=True, verbose_name='О себе')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('update_date', models.DateTimeField(auto_now=True, verbose_name='date update')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
        ),
        migrations.CreateModel(
            name='Specialization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True, verbose_name='Название')),
                ('short_name', models.CharField(default=None, max_length=10, unique=True, verbose_name='Короткое название')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
            ],
            options={
                'verbose_name': 'Специализация',
                'verbose_name_plural': 'Специализации',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SocialNetwork',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, choices=[('whatsapp', 'Whatsapp'), ('telegram', 'Telegram'), ('instagram', 'Instagram'), ('facebook', 'Facebook'), ('vk', 'VK'), ('twitter', 'Twitter')], max_length=25, verbose_name='Социальная сеть')),
                ('link_on_socnet', models.URLField(blank=True, default=None, max_length=2000, null=True, verbose_name='Ссылка')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Социальная сеть',
                'verbose_name_plural': 'Социальные сети',
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='user',
            name='specialization',
            field=models.ManyToManyField(blank=True, default=None, related_name='profile_specialization', to='profile_user.Specialization', verbose_name='Специализация'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
